name: Deploy to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  BACKEND_IMAGE_NAME: taskmanager-backend
  FRONTEND_IMAGE_NAME: taskmanager-frontend

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ./backend/gradlew

    - name: Test backend
      run: |
        cd backend
        ./gradlew test --no-daemon

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Test frontend
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  build-and-push-images:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v2
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}

  deploy-to-azure:
    needs: build-and-push-images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Copy deployment files to VM
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VM_PUBLIC_IP }}
        username: azureuser
        key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
        source: "docker-compose.azure.yml,deployment/"
        target: "/app/"

    - name: Deploy to Azure VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM_PUBLIC_IP }}
        username: azureuser
        key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
        script: |
          cd /app
          
          # Login to Azure Container Registry
          echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin
          
          # Create environment file
          cat > .env << EOF
          ACR_LOGIN_SERVER=${{ secrets.ACR_LOGIN_SERVER }}
          SQL_CONNECTION_STRING="${{ secrets.SQL_CONNECTION_STRING }}"
          SQL_ADMIN_USER=${{ secrets.SQL_ADMIN_USER }}
          SQL_ADMIN_PASSWORD="${{ secrets.SQL_ADMIN_PASSWORD }}"
          JWT_SECRET="${{ secrets.JWT_SECRET }}"
          VM_PUBLIC_IP=${{ secrets.VM_PUBLIC_IP }}
          EOF
          
          # Pull latest images
          docker-compose -f docker-compose.azure.yml pull
          
          # Stop existing containers
          docker-compose -f docker-compose.azure.yml down
          
          # Start new containers
          docker-compose -f docker-compose.azure.yml up -d
          
          # Clean up old images
          docker image prune -f
          
          # Show running containers
          docker ps

    - name: Health Check
      run: |
        # Wait for services to start
        sleep 60
        
        # Check backend health
        curl -f http://${{ secrets.VM_PUBLIC_IP }}:8081/api/actuator/health || exit 1
        
        # Check frontend availability
        curl -f http://${{ secrets.VM_PUBLIC_IP }}/ || exit 1
        
        echo "✅ Deployment successful! Application is running."

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🚀 Deployment successful!"
          echo "🌐 Frontend: http://${{ secrets.VM_PUBLIC_IP }}"
          echo "🔧 Backend API: http://${{ secrets.VM_PUBLIC_IP }}:8081/api"
          echo "💊 Health Check: http://${{ secrets.VM_PUBLIC_IP }}:8081/api/actuator/health"
        else
          echo "❌ Deployment failed!"
        fi